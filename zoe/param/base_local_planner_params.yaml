TrajectoryPlannerROS:

# ROBOT CONFIGURATION PARAMETERS

  #The x acceleration limit of the robot in meters/sec^2
  acc_lim_x: 1.2
  #The y acceleration limit of the robot in meters/sec^2
  acc_lim_y: 1.2
  # The rotational acceleration limit of the robot in radians/sec^2
  acc_lim_theta: 1.2
  #The maximum forward velocity allowed for the base in meters/sec
  # the maximum velocity for spot is 1.6 meters?second, I impose hal of it for safety
  max_vel_x: 0.8
  # The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.
  min_vel_x: 0.1
  #The maximum rotational velocity allowed for the base in radians/sec
  max_vel_theta: 1.0
  #The minimum rotational velocity allowed for the base in radians/sec
  min_vel_theta: -1.0
  #The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
  min_in_place_vel_theta: -0.5
  #Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
  escape_vel: -0.6
  #Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued.
  holonomic_robot: true
  #The strafing velocities that a holonomic robot will consider in meters/sec
  max_vel_y: 0.8
  min_vel_y: 0.1
  vy_samples: 8

# GOAL TOLERANCE PARAMETERS
  # The tolerance in radians for the controller in yaw/rotation when achieving its goal
  yaw_goal_tolerance: 0.1
  # The tolerance in meters for the controller in the x & y distance when achieving a goal
  xy_goal_tolerance: 0.2
  # If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so
  # capire se mi serve settarlo
  
  
# FORWARD SIMULATION PARAMETERS
  # The amount of time to forward-simulate trajectories in seconds
  sim_time: 2.0
  # The step size, in meters, to take between points on a given trajectory
  sim_granularity: 0.05
  # The step size, in radians, to take between angular samples on a given trajectory
  angular_sim_granularity: 0.01
  # The number of samples to use when exploring the x velocity space
  vx_samples: 8
  #The number of samples to use when exploring the theta velocity space
  vtheta_samples: 20
  # The frequency at which this controller will be called in Hz.
  controller_frequency: 20.0

# TRAJECOTRY SCORING PARAMETERS
  # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells
  meter_scoring: true
  # The weighting for how much the controller should stay close to the path it was given
  pdist_scale: 1.0
  # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  gdist_scale: 1.0
  # The weighting for how much the controller should attempt to avoid obstacles
  occdist_scale: 7.0
  # How far to look ahead in meters when scoring different in-place-rotation trajectories
  # DA CAPIRE
  heading_lookahead: 5.0
  # Whether to score based on the robot's heading to the path or its distance from the path
  # DA CAPIRE
  #heading_scoring: true
  # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  #heading_scoring_timestep: 1.0
  # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  dwa: true
  # Whether or not to publish the cost grid that the planner will use when planning.
  publish_cost_grid_pc: false
  # The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame.
  global_frame_id: map

# OSCILLATION PREVENTION PARAMETERS
 
  # How far the robot must travel in meters before oscillation flags are reset
  oscillation_reset_dist: 0.1

# GLOBAL PLAN_PARAMETERS
  # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
  prune_plan: true
